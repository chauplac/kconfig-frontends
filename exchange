#/bin/bash -x
git clone https://github.com/chrismatteson/terraform-vault-consul-deployment
ln -s terraform-vault-consul-deployment/aws/examples/three_clusters_bastion_vpc_peering workdir
cd workdir
cat >policy_admin.hcl<<END
# Mount the AppRole auth method
path "sys/auth/approle" {
        capabilities = [ "create", "read", "update", "delete", "sudo" ]
}

# Configure the AppRole auth method
path "sys/auth/approle/*" {
        capabilities = [ "create", "read", "update", "delete" ]
}

# Create and manage roles
path "auth/approle/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# Write test data
path "secret/mysql/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# To read enabled secrets engines
path "sys/mounts" {
        capabilities = [ "read" ]
}

# Mount secrets engines
path "sys/mounts/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# Configure the database secrets engine and create roles
path "database/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# Write ACL policies
path "sys/policies/acl/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# Manage tokens for verification
path "auth/token/create" {
        capabilities = [ "create", "read", "update", "delete", "list", "sudo" ]
}
# Enable transit secrets engine
path "sys/mounts/transit" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}

# Manage the transit secrets engine
path "transit/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}
END
cat >policy_app.hcl<<END
# Get DB credentials
path "database/creds/readonly" {
        capabilities = [ "read" ]
}
# Encrypt using EU key
path "eu_encryption/+/erp" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
}
END
terraform init
export TF_VAR_consul_ent_license
export TF_VAR_region1="us-west-1"
export TF_VAR_region2="us-west-2"
export TF_VAR_region3="eu-central-1"
export VAULT_LICENSE="01MV4UU43BK5HGYYTOJZWFQMTMNNEWU33JLJCFU2COK5HGQT2EKV2FSVCCNNNEGMLJLJLUSMCMKRCXSWLNKF2FU3KZPJMXUVJRJV5FCNCZNJVTISLJO5UVSM2WPJSEOOLULJMEUZTBK5IWST3JJJUE22SNGRGVIRJVLJUTAMSONVMTGTCUKUYE6VDLORGVOVTKJVBTC2KNNJUGUTTKIF3U2VDINRMXU23JJRBUU4DCNZHDAWKXPBZVSWCSOBRDENLGMFLVC2KPNFEXCSLJO5UWCWCOPJSFOVTGMRDWY5C2KNETMSLKJF3U2VDLORGVIRLUJVKGQVKNIRTTMTSEIU3E22SFOVGXU2ZQJVKESNKNIRITEV3JJFZUS3SOGBMVQSRQLAZVE4DCK5KWST3JJF4U2RCFGVGFIRLYJRKEKNCWIRAXOT3KIF3U62SBO5LWSSLTJFWVMNDDI5WHSWKYKJYGEMRVMZSEO3DULJJUSNSJNJEXOTLKLF2E2RCJORGUIRSVJVVE2NSOKRVTMTSUNN2U6VDLGVLWSSLTJFXFE3DDNUYXAYTNIYYGCVZZOVMDGUTQMJLVK2KPNFEXSTKEJEZUYVCFPFGFIQLYKZCES6SPNJKTKT3KKU2UY2TLGVHVM33JJRBUU53DNU4WWZCXJYYES2TPNFSG2RRRMJEFC2KMINFG2YSHIZXGG6KJGZSXSSTXLFLU44SZK5SGYSLKN5UWGSCKNRRFO3BRMJJUUOLGKE6T2LTWMF2WY5B2OYYTU4CNJFNDI6CNKF4VOOCONNKTE3DGMZRW6N2NGRXDEWRQKBIU6UC2IFMFOYKZMZ5E24JTINGVEZCXO42TQNCGPFYFU2CHJFAUWVZRGFFUOYTONB4VA5DTGRXU2RKJJZUC6YKWMFTUIUJ5HU"
terraform apply -auto-approve || exit

# Disable host checking for ssh keys.
mkdir -p ~/.ssh
cat > ~/.ssh/config <<EOF
Host *
    StrictHostKeyChecking no
EOF
chmod 644 ~/.ssh/config

echo Wait 60s for Vaults to be ready
sleep 120
export VAULT_ADDR=http://localhost:8200

# Tunnel, init, license all Vaults
for v in Primary DR EU
do
  eval $(terraform output Jump_to_$v)
  vault operator init -format=json -recovery-shares=1 -recovery-threshold=1 -recovery-pgp-keys="keybase:hashicorpchip" >> vault.$v.json
  export VAULT_TOKEN=$(jq -r .root_token vault.$v.json)
  vault write sys/license text="$VAULT_LICENSE"
  vault write sys/license text="$VAULT_LICENSE"
  vault write sys/license text="$VAULT_LICENSE"
  vault write sys/license text="$VAULT_LICENSE"
  vault write sys/license text="$VAULT_LICENSE"
  eval $(terraform output Jump_Close)
done
